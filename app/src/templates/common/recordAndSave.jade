doctype html
html
    head
        meta(http-equiv='Content-Type', content='text/html; charset=utf-8')
        // skip
        title EasyRTC Demo:EasyRTC Demo: Video+Audio HD 720
        link(rel='stylesheet', type='text/css', href='/easyrtc/css/easyrtc.css')
        // hide
        link(rel='stylesheet', type='text/css', href='/easyrtc/css/landing.css')
        link(rel='stylesheet', type='text/css', href='/easyrtc/css/demo_audio_video_simple_hd.css')
        // Prettify Code
        script(type='text/javascript', src='/easyrtc/js/prettify/prettify.js')
        script(type='text/javascript', src='/easyrtc/js/prettify/loadAndFilter.js')
        script(type='text/javascript', src='/easyrtc/js/prettify/jquery.min.js')
        link(rel='stylesheet', type='text/css', href='/easyrtc/js/prettify/prettify.css')
        // show
        // Assumes global locations for socket.io.js and easyrtc.js
        script(src='/easyrtc/js/socket-io.js?b=20')
        script(type='text/javascript', src='/easyrtc/js/easyrtc.js?a=20')
        //- script(type='text/javascript', src='js/demo_audio_video_simple_hd.js')
    body(onload='connect();')
        // hide
        #container
            
            #main
                // Main Content
                // show
                h1 EasyRTC Demo: Video+Audio HD 720p
                #demoContainer
                    
                    #connectControls
                        #iam Not yet connected...
                        br
                        strong Connected users:
                        #otherClients
                    #videos
                        video#selfVideo.easyrtcMirror(autoplay='autoplay', muted='muted', volume='0')
                        div(style='position:relative;float:left;')
                            video#callerVideo(autoplay='autoplay')
                        // each caller video needs to be in it"s own div so it"s close button can be positioned correctly
                    #recordButtons
                        input#useVP8(type='radio', onclick='easyrtc.setRecordingVideoCodec(', checked='checked', name='codecUsed')
                        |  VP8 
                        input#useVP9(type='radio', onclick='easyrtc.setRecordingVideoCodec(', name='codecUsed')
                        |  VP9 
                        input#useH264(type='radio', onclick='easyrtc.setRecordingVideoCodec(', name='codecUsed')
                        |  H264 
                        br
                        button#startRecording(disabled='disabled', onclick='startRecording();') Start recording
                        button#stopRecording(disabled='disabled', onclick='endRecording();') End/finish recording
                        br
                        |              download links for videos: self:
                        a#selfDownloadLink
                        |               caller:
                        a#callerDownloadLink
            #footer
               
    
    script.
        //
        //Copyright (c) 2016, Skedans Systems, Inc.
        //All rights reserved.
        //
        //Redistribution and use in source and binary forms, with or without
        //modification, are permitted provided that the following conditions are met:
        //
        //    * Redistributions of source code must retain the above copyright notice,
        //      this list of conditions and the following disclaimer.
        //    * Redistributions in binary form must reproduce the above copyright
        //      notice, this list of conditions and the following disclaimer in the
        //      documentation and/or other materials provided with the distribution.
        //
        //THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        //AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        //IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        //ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
        //LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        //CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        //SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
        //INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
        //CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        //ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        //POSSIBILITY OF SUCH DAMAGE.
        //
        var selfEasyrtcid = "";
        function connect() {
          if( !easyrtc.supportsRecording()) {
             window.alert("This browser does not support recording. Try chrome or firefox.");
             return;
          }
          if( easyrtc.isRecordingTypeSupported("h264")) document.getElementById("useH264").disabled = false;
          if( easyrtc.isRecordingTypeSupported("vp9")) document.getElementById("useVP9").disabled = false;
          if( easyrtc.isRecordingTypeSupported("vp8")) document.getElementById("useVP8").disabled = false;
          easyrtc.setVideoDims(640,480);
          easyrtc.setRecordingVideoCodec("h264");
          easyrtc.setRoomOccupantListener(convertListToButtons);
          easyrtc.easyApp("easyrtc.audioVideoSimple", "selfVideo", ["callerVideo"], loginSuccess, loginFailure);
         }
        function clearConnectList() {
          var otherClientDiv = document.getElementById("otherClients");
          while (otherClientDiv.hasChildNodes()) {
            otherClientDiv.removeChild(otherClientDiv.lastChild);
          }
        }
        function convertListToButtons (roomName, data, isPrimary) {
          clearConnectList();
          var otherClientDiv = document.getElementById("otherClients");
          for(var easyrtcid in data) {
            var button = document.createElement("button");
            button.onclick = function(easyrtcid) {
              return function() {
                performCall(easyrtcid);
              };
            }(easyrtcid);
            var label = document.createTextNode(easyrtc.idToName(easyrtcid));
            button.appendChild(label);
            otherClientDiv.appendChild(button);
          }
        }
        function performCall(otherEasyrtcid) {
          easyrtc.hangupAll();
          var successCB = function() { };
          var failureCB = function() {};
          easyrtc.call(otherEasyrtcid, successCB, failureCB);
        }
        function loginSuccess(easyrtcid) {
          selfEasyrtcid = easyrtcid;
          document.getElementById("iam").innerHTML = "I am " + easyrtc.cleanId(easyrtcid);
          document.getElementById("startRecording").disabled = false;
        }
        function loginFailure(errorCode, message) {
          easyrtc.showError(errorCode, message);
        }
        var selfRecorder = null;
        var callerRecorder = null;
        function startRecording() {
          var selfLink = document.getElementById("selfDownloadLink");
          selfLink.innerText = "";
          var callback = function(e){
            console.log(e);
          }
          selfRecorder = easyrtc.recordToCallback( easyrtc.getLocalStream(), 
                 callback,2000);
          if( selfRecorder ) {
             document.getElementById("startRecording").disabled = true;
             document.getElementById("stopRecording").disabled = false;
          }
          else {
             window.alert("failed to start recorder for self");
             return;
          }
          var callerLink = document.getElementById("callerDownloadLink");
          callerLink.innerText = "";
          if( easyrtc.getIthCaller(0)) {
             callerRecorder = easyrtc.recordToFile(
               easyrtc.getRemoteStream(easyrtc.getIthCaller(0), null), 
               callerLink, "callerVideo");
             if( !callerRecorder ) {
              window.alert("failed to start recorder for caller");
             }
          }
          else {
             callerRecorder = null;
          }
        }
        function endRecording() {
          if( selfRecorder ) {
             selfRecorder.stop();
          }
          if( callerRecorder ) {
             callerRecorder.stop();
          }
          document.getElementById("startRecording").disabled = false;
          document.getElementById("stopRecording").disabled = true;
        }