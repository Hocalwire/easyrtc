doctype html
html
    head
        meta(http-equiv='Content-Type', content='text/html; charset=utf-8')
        // skip
        title EasyRTC Demo:EasyRTC Demo: Video+Audio HD 720
        link(rel='stylesheet', type='text/css', href='/easyrtc/css/easyrtc.css')
        // hide
        link(rel='stylesheet', type='text/css', href='/easyrtc/css/landing.css')
        link(rel='stylesheet', type='text/css', href='/easyrtc/css/demo_audio_video_simple_hd.css')
        // Prettify Code
        script(type='text/javascript', src='/easyrtc/js/prettify/prettify.js')
        script(type='text/javascript', src='/easyrtc/js/prettify/loadAndFilter.js')
        script(type='text/javascript', src='/easyrtc/js/prettify/jquery.min.js')
        link(rel='stylesheet', type='text/css', href='/easyrtc/js/prettify/prettify.css')
        // show
        // Assumes global locations for socket.io.js and easyrtc.js
        script(src='/easyrtc/js/socket-io.js?b=20')
        script(src="/recording/scripts/RecordRTC.js")
        script(type='text/javascript', src='/easyrtc/js/easyrtc.js?a=20')
        //- script(type='text/javascript', src='js/demo_audio_video_simple_hd.js')
    body(onload='connect();')
        // hide
        #container
            
            #main
                // Main Content
                // show
                h1 EasyRTC Demo: Video+Audio HD 720p
                #demoContainer
                    
                    #connectControls
                        #iam Not yet connected...
                        br
                        strong Connected users:
                        #otherClients
                    #videos
                        video#selfVideo.easyrtcMirror(autoplay='autoplay', muted='muted', volume='0')
                        
                    #recordButtons
                        button#startRecording(disabled='disabled', onclick='startRecording();') Start recording
                        button#stopRecording(disabled='disabled', onclick='endRecording();') End/finish recording
                        
            #footer
               
    style.
        #demoContainer {
          position:relative;
        }
        #connectControls {
          float:left;
          width:250px;
          text-align:center;
          border: 2px solid black;
        }
        #otherClients {
          height:200px;
          overflow-y:scroll;
        }
        #selfVideo {
          height:225px;
          width:300px;
          float:left;
          border:1px solid gray;
          margin-left:10px;
        }
        #callerVideo {
          height:225px;
          width:300px;
          border:1px solid gray;
          margin-left:10px;
        }
        #recordButtons {
          clear:both;
        }
    script.
        //
        //Copyright (c) 2016, Skedans Systems, Inc.
        //All rights reserved.
        //
        //Redistribution and use in source and binary forms, with or without
        //modification, are permitted provided that the following conditions are met:
        //
        //    * Redistributions of source code must retain the above copyright notice,
        //      this list of conditions and the following disclaimer.
        //    * Redistributions in binary form must reproduce the above copyright
        //      notice, this list of conditions and the following disclaimer in the
        //      documentation and/or other materials provided with the distribution.
        //
        //THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        //AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        //IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        //ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
        //LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        //CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        //SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
        //INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
        //CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        //ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        //POSSIBILITY OF SUCH DAMAGE.
        //
        var selfEasyrtcid = "";
        var socket;
        var partner =  "thamarai";
        var domain = "http://thamaraisite.vocalwire.com";
        domain = domain.replace("http://","https://");
        var blobs = [];
        var mediaId = "test";
        var fileName = mediaId+".mp4";
        var mediaIds = mediaId;
        var streamId = "12345";
        var streamName = "";
        function connect() {
          if( !easyrtc.supportsRecording()) {
             window.alert("This browser does not support recording. Try chrome or firefox.");
             return;
          }
          socket=io.connect(domain);
          easyrtc.setVideoDims(640,480);
          easyrtc.setRecordingVideoCodec("h264");
          easyrtc.setRoomOccupantListener(convertListToButtons);
          easyrtc.easyApp("easyrtc.audioVideoSimple", "selfVideo", [], loginSuccess, loginFailure);
         }
        function clearConnectList() {
          var otherClientDiv = document.getElementById("otherClients");
          while (otherClientDiv.hasChildNodes()) {
            otherClientDiv.removeChild(otherClientDiv.lastChild);
          }
        }
        function convertListToButtons (roomName, data, isPrimary) {
          clearConnectList();
          var otherClientDiv = document.getElementById("otherClients");
          for(var easyrtcid in data) {
            var button = document.createElement("button");
            button.onclick = function(easyrtcid) {
              return function() {
                performCall(easyrtcid);
              };
            }(easyrtcid);
            var label = document.createTextNode(easyrtc.idToName(easyrtcid));
            button.appendChild(label);
            otherClientDiv.appendChild(button);
          }
        }
        function performCall(otherEasyrtcid) {
          easyrtc.hangupAll();
          var successCB = function() { };
          var failureCB = function() {};
          easyrtc.call(otherEasyrtcid, successCB, failureCB);
        }
        function loginSuccess(easyrtcid) {
          selfEasyrtcid = easyrtcid;
          //- document.getElementById("iam").innerHTML = "I am " + easyrtc.cleanId(easyrtcid);
          document.getElementById("startRecording").disabled = false;
        }
        function loginFailure(errorCode, message) {
          easyrtc.showError(errorCode, message);
        }
        var selfRecorder = null;
        var callerRecorder = null;
        function startRecording() {
          
          var callback = function(e){
            console.log(e);
          }
          selfRecorder = easyrtc.recordToCallback( easyrtc.getLocalStream(), 
                 callback,2000);
          if( selfRecorder ) {
             document.getElementById("startRecording").disabled = true;
             document.getElementById("stopRecording").disabled = false;
          }
          else {
             window.alert("failed to start recorder for self");
             return;
          }
          
        }
        function endRecording() {
          if( selfRecorder ) {
             selfRecorder.stop();
          }
          
          document.getElementById("startRecording").disabled = false;
          document.getElementById("stopRecording").disabled = true;
        }
        function uploadStart(){
            if (socket) {
                socket.emit('uploadStart', {"name":fileName,"streamName":streamName,"streamId":streamId,"accessToken":accessToken,"partner":partner,"title":title,"postId":postId});
            }
        }
        function uploadResumed(){
            if (socket) {
                socket.emit('uploadResume', {"name":fileName,"streamName":streamName,"streamId":streamId});
            }
        }
        function uploadBlob(data,timestamp){
            if (socket) {
                socket.emit('uploadData', {"name":fileName,"streamName":streamName,"timestamp":data.timestamp,"data":data.data,"streamId":streamId});
            }
        }
        function uploadComplete(){
            if (socket) {
                socket.emit('uploadComplete', {"name":fileName,"streamName":streamName,"streamId":streamId});
            }
        }
        var isSaving=false;
        function requestedMoreData(data){
            var timestamp = data.timestamp;
            if(blobs.length){
                if(isSaving){
                    setTimeout(function(){
                        var b = blobs.shift();
                        uploadBlob(b);
                        waitingForBlob=false;
                    },100);
                } else {
                    var b = blobs.shift();
                    uploadBlob(b);
                    waitingForBlob=false;
                }
                
            } else {
                waitingForBlob=true;
            }
        }

        function saveBlobForTimestamp(player){
            isSaving=true;
            var recordedData = player.recordedData;
            var allTimestamps = player.allTimestamps;
            var currentTimestamp = player.currentTimestamp;
            if(recordedData.length){
                var blob = recordedData[recordedData.length-1]; 
                var bb = new Blob([blob], {type: 'video/mp4'});
                var item = {"data":bb,"timestamp":currentTimestamp};
                blobs.push(item);
                blobs = blobs.sort(function(a,b){
                    return (a['timestamp']-b['timestamp']);
                });
                isSaving=false;
                if(waitingForBlob){
                    requestedMoreData(blobs[0]);
                }    
            } else {
                isSaving=false;
            }
        } 
